FROM mcr.microsoft.com/dotnet/sdk:6.0 AS base
WORKDIR /app
EXPOSE 80
EXPOSE 443

# Container to compile angular part
FROM node:14-alpine AS client 
ARG strict_ssl=false
ARG skip_client_build=false
ARG npm_registry
ENV http_proxy=$http_proxy
ENV https_proxy=$https_proxy
ENV no_proxy=$no_proxy

WORKDIR /app 
COPY ClientApp .
RUN npm config set proxy $http_proxy; \
    npm config set https-proxy $https_proxy; \
    npm config set http-proxy $http_proxy; \
    npm config set registry $npm_registry; \
    npm config set strict-ssl $strict_ssl; \
    npm config set noproxy $no_proxy; \
    npm config list; \
    export;

RUN [[ ${skip_client_build} = true ]] && echo "Skipping npm install" || npm install 
RUN [[ ${skip_client_build} = true ]] && mkdir dist || npm run-script build

# Container to compile dotnet part
FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build
ARG nuget_registry
ENV http_proxy=$http_proxy
ENV https_proxy=$https_proxy
ENV no_proxy=$no_proxy

WORKDIR /src
COPY . .
# Install certificats needed to compile
COPY certificates/*  /usr/local/share/ca-certificates/
RUN update-ca-certificates;

# Compile CSharp part
RUN ["/bin/bash", "-c", "[[ ${nuget_registry} = '' ]] && dotnet restore SoupDiscover.csproj || dotnet restore SoupDiscover.csproj --source ${nuget_registry}"]
RUN dotnet build SoupDiscover.csproj -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "SoupDiscover.csproj" -c Release -o /app/publish /p:BuildAngular=false

FROM base AS final
COPY certificates/* /usr/local/share/ca-certificates/
RUN update-ca-certificates;
RUN apt-get update && apt-get install -y \
    git \
    nodejs \
    npm \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app
COPY --from=publish /app/publish .
COPY --from=client /app/dist /app/dist
ENV ASPNETCORE_ENVIRONMENT=Production
ENV ASPNETCORE_URLS="http://0.0.0.0:80"
ENTRYPOINT ["dotnet", "SoupDiscover.dll"]
